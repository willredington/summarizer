/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    CodeExample: ClassViewer<'CodeExample', "code" | "language" | "description">;
    
    Error: ClassViewer<'Error', "url" | "error">;
    
    InputSearchResult: ClassViewer<'InputSearchResult', "url" | "title" | "content">;
    
    PracticalApplication: ClassViewer<'PracticalApplication', "relevanceScore" | "relevanceSummary" | "keyTakeaways" | "actionableItems" | "relatedConcepts">;
    
    RelevanceResult: ClassViewer<'RelevanceResult', "searchResults">;
    
    SearchResult: ClassViewer<'SearchResult', "url" | "title" | "relevanceScore">;
    
    Section: ClassViewer<'Section', "title" | "summary" | "codeExamples" | "keyPoints" | "userRelevance" | "refernceUrls">;
    
    SummaryResult: ClassViewer<'SummaryResult', "urls" | "errors" | "title" | "topic" | "summary" | "tags" | "sections" | "practicalApplication">;
    
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "CodeExample","Error","InputSearchResult","PracticalApplication","RelevanceResult","SearchResult","Section","SummaryResult",
          ]),
          enums: new Set([
            
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.CodeExample = this.tb.classViewer("CodeExample", [
          "code","language","description",
        ]);
        
        this.Error = this.tb.classViewer("Error", [
          "url","error",
        ]);
        
        this.InputSearchResult = this.tb.classViewer("InputSearchResult", [
          "url","title","content",
        ]);
        
        this.PracticalApplication = this.tb.classViewer("PracticalApplication", [
          "relevanceScore","relevanceSummary","keyTakeaways","actionableItems","relatedConcepts",
        ]);
        
        this.RelevanceResult = this.tb.classViewer("RelevanceResult", [
          "searchResults",
        ]);
        
        this.SearchResult = this.tb.classViewer("SearchResult", [
          "url","title","relevanceScore",
        ]);
        
        this.Section = this.tb.classViewer("Section", [
          "title","summary","codeExamples","keyPoints","userRelevance","refernceUrls",
        ]);
        
        this.SummaryResult = this.tb.classViewer("SummaryResult", [
          "urls","errors","title","topic","summary","tags","sections","practicalApplication",
        ]);
        
        
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}