/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\nclient<llm> OpenAI {\n  provider \"openai\"\n  options {\n    api_key env.OPENAI_API_KEY\n    model \"gpt-4o-mini\"\n    temperature 0.1\n  }\n}\n\nclient<llm> Anthropic {\n  provider \"anthropic\"\n  options {\n    api_key env.ANTHROPIC_API_KEY\n    model \"claude-3-7-sonnet-latest\"\n    temperature 0.1\n  }\n}",
  "generators.baml": "\n// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"typescript\"\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../src/\"\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.87.2\"\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    // Regardless of this setting, you can always explicitly call either of the following:\n    // - b.sync.FunctionName()\n    // - b.async_.FunctionName() (note the underscore to avoid a keyword conflict)\n    default_client_mode \"async\"\n    // module_format \"esm\"\n}",
  "summarizer.baml": "// Defining a data model.\nclass SummaryResult {\n  url string @description(\"The url of the provided source\")\n  error string? @description(\"An error message if the url is invalid or you're unable to read from the url\")\n  title string? @description(\"A user-friendly title for the source\")\n  topic string? @description(\"Describes the overall topic of the source\")\n  summary string? @description(\"A brief summary of the provided source\")\n  tags string[]? @description(\"A list of tags that relate or describe the source, tags should all be lowercased and hyphenated\")\n  sections Section[]? @description(\"A topic may have multiple sections, each section is a major topic of the source\")\n  practicalApplication string? @description(\"This should be a highly condensed version of the content that is applicable to user.\")\n}\n\nclass Section {\n  title string @description(\"The title of the section\")\n  summary string @description(\"A brief summary of the section\")\n  codeExamples CodeExample[]? @description(\"If this section has any relevant code examples\")\n  mainBulletPoints string[]? @description(\"The main bullet points of the section\")\n}\n\nclass CodeExample {\n  codeExample string\n  language string @description(#\"\n    the coding language used\n  \"#)\n}\n\nfunction GenerateSummary(url: string, userProfileSynopsis: string) -> SummaryResult {\n  client Anthropic\n  prompt #\"\n    You are a helpful assistant that summarizes webpages.\n    You will be given a url and you will need to summarize the webpage.\n\n    Here is the url:\n    {{ url }}\n\n    You should summarize the webpage in a way that is useful to the user.  \n    Your summary should be as relevant as possible to the user.  \n\n    Here is are the details about the user including their job and job functions:\n    {{ userProfileSynopsis }}\n    \n    You will need to return the summary in the following format:\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest my_summary {\n  functions [GenerateSummary]\n  args {\n    url \"https://www.honeybadger.io/blog/ruby-dry-schema/\"\n    userProfileSynopsis #\"\n      I am a technical architect at a consulting firm.  My day-day to duties involve API design, creating internal tools in ruby, system design, devops, and general programming as necessary.\n      I am skilled in most areas but ruby is a particularly new area for me. I have experience with python, java, javascript, typescript, and golang. \n      I know AWS fairly well but Azure is pretty lacking. In terms of devops I am familiar with Gitlab CI and Jenkins but not much else.\n      Much of my day to day involves API design via open api specifications. But a fair bit of it also involves creating internal tooling using core ruby (meaning not ruby on rails)\n    \"#\n  }\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}