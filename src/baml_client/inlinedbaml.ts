/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\nclient<llm> OpenAI {\n  provider \"openai\"\n  options {\n    api_key env.OPENAI_API_KEY\n    model \"gpt-4o-mini\"\n    temperature 0.1\n  }\n}\n\nclient<llm> Anthropic {\n  provider \"anthropic\"\n  options {\n    api_key env.ANTHROPIC_API_KEY\n    model \"claude-opus-4-20250514\"\n    temperature 0.1\n  }\n}",
  "generators.baml": "\n// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"typescript\"\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../src/\"\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.87.2\"\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    // Regardless of this setting, you can always explicitly call either of the following:\n    // - b.sync.FunctionName()\n    // - b.async_.FunctionName() (note the underscore to avoid a keyword conflict)\n    default_client_mode \"async\"\n    // module_format \"esm\"\n}",
  "summarizer.baml": "class SummaryResult {\n  url string @description(\"The url of the provided source\")\n  error string? @description(\"An error message if the url is invalid or you're unable to read from the url\")\n  title string? @description(\"A user-friendly title for the source\")\n  topic string? @description(\"Describes the overall topic of the source\")\n  summary string? @description(\"A brief summary of the provided source (2-3 sentences)\")\n  tags string[]? @description(\"A list of tags that relate or describe the source, tags should all be lowercased and hyphenated\")\n  sections Section[]? @description(\"Major topics or sections from the source\")\n  practicalApplication PracticalApplication? @description(\"How this content applies specifically to the user's role and responsibilities\")\n}\n\nclass PracticalApplication {\n  relevanceScore int @description(\"How relevant this content is to the user's role (1-10 scale)\")\n  relevanceSummary string @description(\"Brief explanation of why this is relevant to the user's specific role\")\n  keyTakeaways string[] @description(\"3-5 specific insights the user should know\")\n  actionableItems string[]? @description(\"Concrete steps or things the user could implement\")\n  relatedConcepts string[]? @description(\"Related topics the user might want to explore\")\n}\n\nclass Section {\n  title string @description(\"The title of the section\")\n  summary string @description(\"A brief summary of the section\")\n  codeExamples CodeExample[]? @description(\"Relevant code examples from this section\")\n  keyPoints string[]? @description(\"Main bullet points from this section\")\n  userRelevance string? @description(\"How this specific section relates to the user's role\")\n}\n\nclass CodeExample {\n  code string @description(\"The actual code snippet\")\n  language string @description(\"Programming language used\")\n  description string? @description(\"What this code example demonstrates\")\n}\n\n\n// https://github.com/danielmiessler/fabric/blob/main/patterns/extract_wisdom/system.md\nfunction GenerateSummary(url: string, userRole: string, userProfileSynopsis: string) -> SummaryResult {\n  client Anthropic\n  prompt #\"\n    You are an expert content analyzer that specializes in extracting relevant information based on a user's professional role and responsibilities.\n\n    ## Your Task\n    Analyze the provided URL content and create a summary that is specifically tailored to the user's role and responsibilities. Focus on extracting information that is most relevant and actionable for their particular position.\n\n    ## User Context\n    Role: {{ userRole }}\n    Responsibilities: {{ userProfileSynopsis }}\n\n    ## Instructions\n\n    1. **Content Analysis**: Read and analyze the entire content from the provided URL\n    2. **Relevance Filtering**: Filter and prioritize information based on how it relates to the user's specific role and responsibilities\n    3. **Practical Focus**: Emphasize actionable insights, practical applications, and concrete takeaways\n    4. **Professional Context**: Frame everything in terms of how it applies to their day-to-day work\n\n    ## Output Requirements\n\n    - **Error Handling**: If the URL is inaccessible, provide a clear error message\n    - **Relevance Scoring**: Rate content relevance on a 1-10 scale for the user's role\n    - **Actionable Insights**: Focus on what the user can actually do with this information\n    - **Code Examples**: Extract and explain any code that's relevant to their work\n    - **Professional Framing**: Present everything through the lens of their specific responsibilities\n\n    ## Quality Guidelines\n\n    - Keep summaries concise but comprehensive\n    - Use professional, clear language\n    - Prioritize practical value over theoretical concepts\n    - Include specific examples when possible\n    - Make tags descriptive and searchable (lowercase, hyphenated)\n    - Ensure code examples include proper context and explanations\n\n    ## Example Scenarios\n    - If the user is a \"Software Engineer working on internal tools\" reading about RuboCop, focus on how to integrate it into their development workflow, configuration for internal projects, and team adoption strategies\n    - If the user is a \"Product Manager\" reading technical content, emphasize business impact, implementation considerations, and cross-team communication aspects\n\n    Remember: The goal is to make complex or general content immediately useful and relevant to this specific user's professional context.\n\n    URL to analyze: {{ url }}\n    \n    You will need to return the summary in the following format:\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest my_summary {\n  functions [GenerateSummary]\n  args {\n    url \"https://www.honeybadger.io/blog/ruby-dry-schema/\"\n    userRole \"Technical Architect and Senior Software Engineer\"\n    userProfileSynopsis #\"\n      I am a technical architect at a consulting firm.  My day-day to duties involve API design, creating internal tools in ruby, system design, devops, and general programming as necessary.\n      I am skilled in most areas but ruby is a particularly new area for me. I have experience with python, java, javascript, typescript, and golang. \n      I know AWS fairly well but Azure is pretty lacking. In terms of devops I am familiar with Gitlab CI and Jenkins but not much else.\n      Much of my day to day involves API design via open api specifications. But a fair bit of it also involves creating internal tooling using core ruby (meaning not ruby on rails)\n    \"#\n  }\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}