/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\nclient<llm> OpenAI {\n  provider \"openai\"\n  options {\n    api_key env.OPENAI_API_KEY\n    model \"gpt-4o-mini\"\n    temperature 0.1\n  }\n}\n\nclient<llm> Anthropic {\n  provider \"anthropic\"\n  options {\n    api_key env.ANTHROPIC_API_KEY\n    model \"claude-opus-4-20250514\"\n    temperature 0.1\n  }\n}",
  "generators.baml": "\n// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"typescript\"\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../src/\"\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.87.2\"\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    // Regardless of this setting, you can always explicitly call either of the following:\n    // - b.sync.FunctionName()\n    // - b.async_.FunctionName() (note the underscore to avoid a keyword conflict)\n    default_client_mode \"async\"\n    // module_format \"esm\"\n}",
  "relevance.baml": "class RelevanceResult {\n  searchResults SearchResult[]\n}\n\nclass InputSearchResult {\n  url string \n  title string\n  content string\n}\n\nclass SearchResult {\n  url string\n  title string\n  relevanceScore int? @description(\"How relevant this content is to the user's role (1-10 scale)\")\n}\n\n\nfunction GetRelevantResults(searchResults: InputSearchResult[], userProfileSynopsis: string) -> RelevanceResult {\n  client Anthropic\n  prompt #\"\n    # Search Result Relevance Selection Prompt\n\n    You are tasked with selecting the most relevant search results for a specific user based on their profile, expertise level, and current needs.\n\n    ## Input Format\n    You will receive:\n    1. **User Profile**: Contains name, role, description, skills, experience level, and current focus areas\n    2. **Search Results**: Array of search result objects with title, url, content, and relevance score\n\n    ## Selection Criteria\n\n    ### Primary Relevance Factors (Weight: 40%)\n    - **Direct Task Relevance**: Does the content directly address the user's current work or immediate needs?\n    - **Skill Level Appropriateness**: Is the content suitable for the user's expertise level in the specific domain?\n    - **Role Alignment**: Does the content match the user's professional responsibilities and daily duties?\n\n    ### Secondary Relevance Factors (Weight: 30%)\n    - **Learning Gaps**: Does the content help fill knowledge gaps mentioned in the user's profile?\n    - **Tool/Technology Match**: Does the content cover tools, languages, or technologies the user works with?\n    - **Practical Application**: Can the user immediately apply this information to their work?\n\n    ### Contextual Factors (Weight: 20%)\n    - **Experience Transfer**: Can the user leverage their existing skills (from other languages/tools) with this content?\n    - **Depth Appropriateness**: Is the content at the right technical depth (not too basic, not too advanced)?\n    - **Workflow Integration**: Does the content fit into the user's existing development workflow?\n\n    ### Quality Indicators (Weight: 10%)\n    - **Content Freshness**: Is the information current and up-to-date?\n    - **Source Authority**: Is the source reputable and trustworthy?\n    - **Completeness**: Does the content provide actionable, complete information?\n\n    ## Selection Process\n\n    1. **Profile Analysis**: \n      - Identify user's expertise level in the search topic area\n      - Note specific technologies, tools, and methodologies they use\n      - Understand their role requirements and daily responsibilities\n      - Identify stated knowledge gaps or learning areas\n\n    2. **Content Evaluation**:\n      - Score each result against the relevance factors above\n      - Consider how the content serves their immediate vs. long-term needs\n      - Evaluate if the content complexity matches their skill level\n      - Assess practical applicability to their current projects\n\n    3. **Ranking Strategy**:\n      - Prioritize content that directly supports their current work\n      - Favor content that builds on their existing expertise\n      - Include diverse perspectives when multiple high-quality options exist\n      - Balance immediate utility with strategic learning value\n\n    ## Output Requirements\n\n    Return the top 3-5 most relevant results with:\n    - **Selected Results**: The chosen search results in order of relevance\n    - **Relevance Reasoning**: 2-3 sentence explanation for each selection explaining why it's valuable for this specific user\n    - **Confidence Score**: 1-10 rating of how well the selection matches the user's needs\n\n    ## Example Application\n\n    For a user profile like:\n    ```\n    Role: Technical Architect and Senior Software Engineer  \n    Skills: Python, Java, JavaScript, TypeScript, Golang\n    Learning Area: Ruby (new to the language)\n    Daily Work: API design, internal tools, system design\n    Experience Level: Senior in general programming, beginner in Ruby\n    ```\n\n    Selection would prioritize:\n    - Ruby content appropriate for experienced programmers new to Ruby\n    - Practical Ruby development guidance over theoretical concepts\n    - Content that leverages their existing programming knowledge\n    - Tools and approaches relevant to API development and internal tooling\n\n    ## Key Considerations\n\n    - **Avoid Beginner Bias**: Don't select overly basic content for experienced developers learning a new technology\n    - **Context Over Keywords**: Prioritize contextual relevance over simple keyword matching\n    - **Practical Over Academic**: Favor actionable content over purely theoretical discussions\n    - **Current Over Comprehensive**: Select immediately useful information over exhaustive references\n\n    Remember: The goal is to provide the most immediately valuable and actionable information for this specific user's current situation and learning journey.\n\n    Here are the search results:\n    {{ searchResults }}\n\n    Here is the user profile:\n    {{ userProfileSynopsis }}\n\n    You will need to return the summary in the following format:\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest get_relevant_results {\n  functions [GetRelevantResults]\n  args {\n    searchResults [\n      InputSearchResult {\n        url: \"https://jaceksamol.com/2023/09/10/the-ultimate-showdown-rvm-vs-asdf-which-is-the-superior-choice/\",\n        title: \"Introduction to Ruby Version Managers (RVM) and ASDF\",\n        content: \"Choosing the best Ruby version manager depends on your specific needs and preferences. If you value a rich feature set, extensive community support, and the ability to manage gemsets, RVM may be the right choice for you. On the other hand, if you prefer a lightweight and efficient tool with a simplified workflow, ASDF is worth considering.\"\n      },\n      InputSearchResult {\n        url: \"https://dev.to/yet_anotherdev/state-of-ruby-what-version-manager-to-use-4gbg\",\n        title: \"State of Ruby : What version manager to use - DEV Community\",\n        content: \"Let's understand the critical difference between those and help you make some choices for your Ruby Version manager. Community Leaderboard : 1.Rbenv 2.ASDF 3.Chruby First, the Tweet shows that Rbenv is a great winner for the Ruby community. But it seems mainly because it is the goto solution.\"\n      },\n      InputSearchResult {\n        url: \"https://profficity.com/articles/ruby-version-managers-pros-and-cons\",\n        title: \"Profficity | Ruby Version Managers: Pros and Cons\",\n        content: \"Choosing the right Ruby version manager depends on your specific needs and preferences. RVM is great for those who need a feature-rich tool with extensive community support. rbenv offers simplicity and extensibility, while chruby provides a minimalistic approach with no performance overhead. asdf is ideal for developers working with multiple languages.\"\n      },\n      InputSearchResult {\n        url: \"https://github.com/rbenv/rbenv/wiki/Comparison-of-version-managers\",\n        title: \"Comparison of version managers Â· rbenv/rbenv Wiki - GitHub\",\n        content: \"chruby is a minimal Ruby version manager that hooks into your shell.. It has no overhead on ruby execution time because it does the switching either on-demand or, optionally, whenever you cd into a project directory. Additionally, it offers robust support for running executables of --user-installed gems.. Its downsides are that it is only available in bash and zsh shells, and that other tools\"\n      },\n      InputSearchResult {\n        url: \"https://www.jetbrains.com/help/ruby/ruby-version-managers.html\",\n        title: \"Ruby version managers | RubyMine Documentation - JetBrains\",\n        content: \"Ruby version managers. The most popular way to install Ruby on Linux or macOS is using a version manager, for example, RVM or rbenv. Version managers allow you to install several Ruby versions on your machine and quickly switch between them. RubyMine automatically detects interpreters installed on a local machine and maintained by the following\"\n      },\n      InputSearchResult {\n        url: \"https://libs.tech/ruby/version-managers\",\n        title: \"Top Ruby Version Managers 2025 - libs.tech\",\n        content: \"Top Ruby Version Managers 2025 GitHub Libraries â Ruby â Version Managers. A/B Testing Libraries 1 Admin Libraries 3 AI / ML Libraries 1 Analytics Libraries 3 Architecture Libraries 4 Auth Libraries 8 Autocomplete Libraries 1 AWS Libraries 1 BDD Libraries 2 Benchmarking Tools 1 Caching Libraries 1 Charting Libraries 3\"\n      },\n      InputSearchResult {\n        url: \"https://www.alchemists.io/articles/ruby_version_managers/\",\n        title: \"Ruby Version Managers - Alchemists\",\n        content: \"Ruby Install, by the way, is a specialized tool for installing different versions of Ruby. While Frum has this functionality baked in, what's nice about Ruby Install â or Frum â is you don't have to wait for any updates to frum, chruby or ruby-install in order to download and install a Ruby version. As long as the Ruby core team has published a versioned download, you're good to go!\"\n      },\n      InputSearchResult {\n        url: \"https://www.reddit.com/r/ruby/comments/wnvprq/what_is_the_recommended_ide_coding_environment/\",\n        title: \"What is the recommended IDE / coding environment for Ruby on a ... - Reddit\",\n        content: \"WSL2 plus a Ruby version manager like RVM (does a lot of setup for you, including prerequisites), rbenv, asdf, or chruby. Be forewarned, there are â for some reason beyond my comprehension â people with very strong opinions in which you should use. My lightly held opinion is the beginners will probably find RVM easiest, because it goes out of its way to do things like install dependencies\"\n      },\n      InputSearchResult {\n        url: \"https://metova.com/choosing-a-ruby-version-management-tool-rbenv-vs-rvm/\",\n        title: \"Choosing a Ruby Version Management Tool: rbenv vs RVM\",\n        content: \"RVM comes with its own Ruby installation mechanism: rvm install ruby-2.3.0. With rbenv, you can either install Ruby yourself (by saving to ~/.rbenv/versions) or make use of ruby-build, a plugin that will install the versions for you. Like rbenv, ruby-build has a homebrew recipe. brew install ruby-build rbenv install 2.3.0\"\n      },\n      InputSearchResult {\n        url: \"https://rvm.io/\",\n        title: \"RVM: Ruby Version Manager - RVM Ruby Version Manager - Documentation\",\n        content: \"Any Ruby based application will benefit from your use of RVM. Testing. RVM enables you to easily test both upgrade and escape paths very easily and consistently. With RVM, you can run a test suite, rake tasks, benchmarks and gem commands against multiple ruby versions at the same time.\"\n      }\n    ],\n    userProfileSynopsis #\"\n      I am a technical architect at a consulting firm.  My day-day to duties involve API design, creating internal tools in ruby, system design, devops, and general programming as necessary.\n      I am skilled in most areas but ruby is a particularly new area for me. I have experience with python, java, javascript, typescript, and golang. \n      I know AWS fairly well but Azure is pretty lacking. In terms of devops I am familiar with Gitlab CI and Jenkins but not much else.\n      Much of my day to day involves API design via open api specifications. But a fair bit of it also involves creating internal tooling using core ruby (meaning not ruby on rails)\n    \"#\n  }\n}\n\n",
  "summarizer.baml": "class SummaryResult {\n  urls string[] @description(\"The urls of the provided sources\")\n  errors Error[]? @description(\"A list of errors in the event we cannot access a url\")\n  title string? @description(\"A user-friendly title for the summary\")\n  topic string? @description(\"Describes the overall topic of the summary\")\n  summary string? @description(\"A brief summary of the provided sources (2-3 sentences)\")\n  tags string[]? @description(\"A list of tags that relate or describe the summary, tags should all be lowercased and hyphenated\")\n  sections Section[]? @description(\"Major topics or sections from the summary\")\n  practicalApplication PracticalApplication? @description(\"How this content applies specifically to the user's role and responsibilities\")\n}\n\nclass Error {\n  url string @description(\"The url of the provided source\")\n  error string @description(\"An error message we cannot access the url\")\n}\n\nclass PracticalApplication {\n  relevanceScore int @description(\"How relevant this content is to the user's role (1-10 scale)\")\n  relevanceSummary string @description(\"Brief explanation of why this is relevant to the user's specific role\")\n  keyTakeaways string[] @description(\"3-5 specific insights the user should know\")\n  actionableItems string[]? @description(\"Concrete steps or things the user could implement\")\n  relatedConcepts string[]? @description(\"Related topics the user might want to explore\")\n}\n\nclass Section {\n  title string @description(\"The title of the section\")\n  summary string @description(\"A brief summary of the section\")\n  codeExamples CodeExample[]? @description(\"Relevant code examples from this section\")\n  keyPoints string[]? @description(\"Main bullet points from this section\")\n  userRelevance string? @description(\"How this specific section relates to the user's role\")\n  refernceUrls string[]? @description(\"The urls of the provided sources\")\n}\n\nclass CodeExample {\n  code string @description(\"The actual code snippet\")\n  language string @description(\"Programming language used\")\n  description string? @description(\"What this code example demonstrates\")\n}\n\n\n// https://github.com/danielmiessler/fabric/blob/main/patterns/extract_wisdom/system.md\nfunction GenerateSummary(searchResults: SearchResult[], userRole: string, userProfileSynopsis: string) -> SummaryResult {\n  client Anthropic\n  prompt #\"\n    # Article Summarizer Tool Prompt\n\n    You are an expert content analyzer that specializes in extracting relevant information based on a user's professional role and responsibilities.\n\n    ## Your Task\n    You will receive search results containing article titles and URLs. For each result, you must:\n    1. **Fetch the full content** from the provided URL\n    2. **Analyze the retrieved content** and create a summary tailored to the user's role and responsibilities\n    3. **Focus on extracting information** that is most relevant and actionable for their particular position\n\n    ## Input Format\n    Each search result will include the following fields:\n    - **url**: The web address you need to fetch content from\n    - **title**: The article headline (for reference only)\n    - **relevanceScore**: Initial relevance assessment (optional)\n\n    **Important**: The search results contain only titles and URLs. You must retrieve the actual article content by accessing each URL before you can provide a meaningful summary.\n\n    ## Error Handling\n\n    - **Inaccessible URLs**: Provide clear error messages and attempt to extract useful information from the title if available\n    - **Partial Content**: If only partial content is accessible, clearly indicate what was analyzed\n    - **Technical Issues**: Explain any limitations that prevented full content analysis\n    - If you cannot access the url, you should not include it in the summary\n    - If more than 2 urls are inaccessible, you should return an error message and end the process\n\n    ## User Context\n\n    Role: {{ userRole }}\n    Responsibilities: {{ userProfileSynopsis }}\n\n    ## Processing Instructions\n\n    1. **Content Retrieval**: \n      - Access each provided URL to retrieve the full article content\n      - Handle any access issues (paywalls, broken links, etc.) gracefully\n\n    2. **Content Analysis**: \n      - Read and analyze the entire retrieved content\n      - Extract key information relevant to the user's role\n\n    3. **Relevance Filtering**: \n      - Filter and prioritize information based on how it relates to the user's specific role and responsibilities\n      - Focus on practical applications and actionable insights\n\n    4. **Professional Context**: \n      - Frame everything in terms of how it applies to their day-to-day work\n      - Emphasize what the user can actually implement or act upon\n\n    ## Output Requirements\n\n    - **URL Access Status**: Clearly indicate if content was successfully retrieved or if there were access issues\n    - **Relevance Scoring**: Rate content relevance on a 1-10 scale for the user's role\n    - **Actionable Insights**: Focus on what the user can actually do with this information\n    - **Code Examples**: Extract and explain any code that's relevant to their work (with proper context)\n    - **Professional Framing**: Present everything through the lens of their specific responsibilities\n\n    ## Error Handling\n\n    - **Inaccessible URLs**: Provide clear error messages and attempt to extract useful information from the title if available\n    - **Partial Content**: If only partial content is accessible, clearly indicate what was analyzed\n    - **Technical Issues**: Explain any limitations that prevented full content analysis\n\n    ## Quality Guidelines\n\n    - Keep summaries concise but comprehensive\n    - Use professional, clear language\n    - Prioritize practical value over theoretical concepts\n    - Include specific examples when possible\n    - Make tags descriptive and searchable (lowercase, hyphenated)\n    - Ensure code examples include proper context and explanations\n\n    ## Example Workflow\n    1. Receive search result with title \"Advanced RuboCop Configuration\" and URL\n    2. Fetch full article content from the provided URL\n    3. If user is a \"Software Engineer working on internal tools\":\n      - Focus on integration into development workflow\n      - Extract configuration examples for internal projects\n      - Highlight team adoption strategies\n      - Provide actionable setup instructions\n\n    Remember: You cannot provide meaningful summaries based solely on titles and URLs. Always retrieve the full content first, then analyze it through the lens of the user's specific professional context.\n\n    ## Input Data\n    Here are the search results to process:\n    {{ searchResults }}\n\n    ## Required Output Format\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest my_summary {\n  functions [GenerateSummary]\n  args {\n    url \"https://www.honeybadger.io/blog/ruby-dry-schema/\"\n    userRole \"Technical Architect and Senior Software Engineer\"\n    userProfileSynopsis #\"\n      I am a technical architect at a consulting firm.  My day-day to duties involve API design, creating internal tools in ruby, system design, devops, and general programming as necessary.\n      I am skilled in most areas but ruby is a particularly new area for me. I have experience with python, java, javascript, typescript, and golang. \n      I know AWS fairly well but Azure is pretty lacking. In terms of devops I am familiar with Gitlab CI and Jenkins but not much else.\n      Much of my day to day involves API design via open api specifications. But a fair bit of it also involves creating internal tooling using core ruby (meaning not ruby on rails)\n    \"#,\n    searchResults [\n      InputSearchResult {\n        url: \"https://jaceksamol.com/2023/09/10/the-ultimate-showdown-rvm-vs-asdf-which-is-the-superior-choice/\",\n        title: \"Introduction to Ruby Version Managers (RVM) and ASDF\",\n      },\n      InputSearchResult {\n        url: \"https://dev.to/yet_anotherdev/state-of-ruby-what-version-manager-to-use-4gbg\",\n        title: \"State of Ruby : What version manager to use - DEV Community\",\n      },\n      InputSearchResult {\n        url: \"https://profficity.com/articles/ruby-version-managers-pros-and-cons\",\n        title: \"Profficity | Ruby Version Managers: Pros and Cons\",\n      }\n    ]\n  }\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}